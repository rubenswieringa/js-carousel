// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Carousel = (function() {
    function Carousel(element, options) {
      var nextButton, prevButton, _ref;
      this.element = element;
      if (options == null) {
        options = {};
      }
      this.getTransitionDuration = __bind(this.getTransitionDuration, this);
      this.setSlidePosition = __bind(this.setSlidePosition, this);
      this.getSlide = __bind(this.getSlide, this);
      this.clean = __bind(this.clean, this);
      this.add = __bind(this.add, this);
      this.prev = __bind(this.prev, this);
      this.next = __bind(this.next, this);
      if (!((_ref = this.element) != null ? _ref.length : void 0)) {
        return;
      }
      this.currentIndex = 0;
      this.slides = this.element.find('img');
      this.slides.filter(':not(:first)').remove();
      nextButton = options.next || this.element.find('a.next');
      prevButton = options.prev || this.element.find('a.prev');
      nextButton.click(this.next);
      prevButton.click(this.prev);
    }

    Carousel.prototype.next = function() {
      var slide;
      this.currentIndex++;
      if (!(this.currentIndex < this.slides.length)) {
        this.currentIndex = 0;
      }
      slide = this.getSlide(this.currentIndex);
      if (Modernizr.csstransitions) {
        this.setSlidePosition(slide, '100%');
      }
      this.add(slide);
      return false;
    };

    Carousel.prototype.prev = function() {
      var slide;
      this.currentIndex--;
      if (!(this.currentIndex >= 0)) {
        this.currentIndex = this.slides.length - 1;
      }
      slide = this.getSlide(this.currentIndex);
      if (Modernizr.csstransitions) {
        this.setSlidePosition(slide, '-100%');
      }
      this.add(slide);
      return false;
    };

    Carousel.prototype.add = function(slide) {
      var duration, lastSlide;
      lastSlide = this.element.find('img:last');
      lastSlide.after(slide);
      duration = this.getTransitionDuration(slide);
      if (duration) {
        setTimeout(this.setSlidePosition, 0, slide, 0);
        return setTimeout(this.clean, duration, slide);
      } else {
        this.setSlidePosition(slide, 0);
        return this.clean(slide);
      }
    };

    Carousel.prototype.clean = function(slide) {
      return slide.prevAll().remove();
    };

    Carousel.prototype.getSlide = function(index) {
      var slide;
      slide = $(this.slides.get(index));
      if (jQuery.contains(document.documentElement, slide.get(0))) {
        slide = slide.clone();
      }
      return slide;
    };

    Carousel.prototype.setSlidePosition = function(slide, position) {
      return slide.css({
        left: position
      });
    };

    Carousel.prototype.getTransitionDuration = function(element) {
      var duration, prefix, _i, _len, _ref;
      if (!Modernizr.csstransitions) {
        return 0;
      }
      _ref = Modernizr._prefixes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        prefix = _ref[_i];
        duration = element.css("" + prefix + "transition-duration");
        if (duration) {
          return parseFloat(duration) * 1000;
        }
      }
      return 0;
    };

    return Carousel;

  })();

}).call(this);
